{"version":3,"sources":["CopyToClipboard.js","App.js","serviceWorker.js","index.js"],"names":["Clipboard","props","useState","isCopied","setIsCopied","targetEl","useRef","timer","useEffect","clipboard","ClipboardJS","current","text","on","e","clearTimeout","setTimeout","console","log","destroy","ref","children","Truncate","styled","Box","overflow","whiteSpace","textOverflow","IconList","filterValue","icons","Object","keys","filter","key","toLowerCase","includes","map","index","CopyToClipboard","width","m","title","style","textAlign","React","createElement","size","fontSize","FilteredIcons","placeholder","setFilterValue","my","Field","label","Input","type","onChange","target","value","Flex","flexWrap","App","ThemeProvider","theme","className","BaseStyles","Heading","as","Text","bg","p","mt","Icon","name","color","Star","Battery20","Algo","Btc","Xuc","tokenIcons","mdIcons","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.369fc739.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport ClipboardJS from \"clipboard\";\r\n\r\nconst Clipboard = props => {\r\n  const [isCopied, setIsCopied] = useState(false);\r\n  const targetEl = useRef(null);\r\n  const timer = useRef(0);\r\n\r\n  useEffect(() => {\r\n    const afterCopy = () => {\r\n      setIsCopied(true);\r\n      clearTimeout(timer.current);\r\n      timer.current = setTimeout(() => setIsCopied(false), 1500);\r\n    };\r\n\r\n    const clipboard = new ClipboardJS(targetEl.current, {\r\n      text: () => props.text\r\n    });\r\n\r\n    clipboard.on(\"success\", e => {\r\n      // console.log('text copied!:', props.text);\r\n      afterCopy();\r\n    });\r\n\r\n    clipboard.on(\"error\", e => {\r\n      console.log(\"error: failed to copy text\", e);\r\n    });\r\n\r\n    return () => {\r\n      clipboard.destroy();\r\n      clearTimeout(timer.current);\r\n    };\r\n  });\r\n\r\n  return <div ref={targetEl}>{props.children(isCopied)}</div>;\r\n};\r\n\r\nexport default Clipboard;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  ThemeProvider,\r\n  theme,\r\n  BaseStyles,\r\n  Flex,\r\n  Box,\r\n  Field,\r\n  Input,\r\n  Heading,\r\n  Text\r\n} from \"pipeline-ui\";\r\n// import * as icons from \"@pipeline-ui/icons\";\r\nimport * as mdIcons from \"@pipeline-ui/icons/es/md\";\r\nimport * as tokenIcons from \"@pipeline-ui/icons/es/tokens\";\r\nimport { Star, Battery20 } from \"@pipeline-ui/icons\";\r\nimport { Algo, Btc, Xuc } from \"@pipeline-ui/icons\";\r\nimport { Icon } from \"@pipeline-ui/icons\";\r\nimport styled from \"styled-components\";\r\nimport CopyToClipboard from \"./CopyToClipboard\";\r\n\r\nconst Truncate = styled(Box)([], {\r\n  overflow: \"hidden\",\r\n  whiteSpace: \"nowrap\",\r\n  textOverflow: \"ellipsis\"\r\n});\r\n\r\n\r\nconst IconList = ({ filterValue, icons }) => {\r\n  return Object.keys(icons)\r\n    .filter(key => key !== \"Icon\" && key.toLowerCase().includes(filterValue.toLowerCase()))\r\n    .map((key, index) => (\r\n      <Box key={key + index}>\r\n        <CopyToClipboard text={key}>\r\n          {isCopied => (\r\n            <Box\r\n              width={\"4rem\"}\r\n              key={key}\r\n              m={3}\r\n              title={key}\r\n              style={{\r\n                textAlign: \"center\"\r\n              }}\r\n            >\r\n              {React.createElement(icons[key], {\r\n                size: 48\r\n              })}\r\n\r\n              <Truncate fontSize={\"1rem\"}>{isCopied ? \"Copied\" : key}</Truncate>\r\n            </Box>\r\n          )}\r\n        </CopyToClipboard>\r\n      </Box>\r\n    ));\r\n};\r\n\r\nconst FilteredIcons = ({ icons, placeholder }) => {\r\n  const [filterValue, setFilterValue] = useState(\"\");\r\n  return (\r\n    <Box my={4}>\r\n      <Field label=\"Filter icons\">\r\n        <Input\r\n          type=\"text\"\r\n          placeholder={`e.g. ${placeholder}`}\r\n          onChange={e => setFilterValue(e.target.value)}\r\n          value={filterValue}\r\n        />\r\n      </Field>\r\n\r\n      <Flex flexWrap=\"wrap\">\r\n        <IconList filterValue={filterValue} icons={icons} />\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst App = props => {\r\n  return (\r\n    <ThemeProvider theme={theme} className=\"App\">\r\n      <BaseStyles>\r\n        <Box m={4}>\r\n          <Heading as=\"h1\">PIPELINE Icons</Heading>\r\n\r\n          <Text>Install with peer dependency</Text>\r\n\r\n          <Box bg={\"light-gray\"} p={3}>\r\n            <Text>yarn add @pipeline-ui/icons styled-components</Text>\r\n          </Box>\r\n\r\n          <Text mt={3}>Import entire library and reference any icon</Text>\r\n\r\n          <Box bg={\"light-gray\"} p={4}>\r\n            <Text>import {`{ Icon }`} from \"@pipeline-ui/icons\";</Text>\r\n            <Text>{`<Icon name=\"Star\" />`}</Text>\r\n            <Text>{`<Icon name=\"Star\" color=\"red\" /> // set color value directly`}</Text>\r\n            <Text>\r\n              {`<Icon name=\"Star\" color=\"primary\" /> // access styled-system\r\n              theme color values`}\r\n            </Text>\r\n          </Box>\r\n\r\n          <Flex>\r\n            <Box m={3}>\r\n              <Icon name=\"Star\" size={\"24px\"} />\r\n            </Box>\r\n\r\n            <Box m={3}>\r\n              <Icon name=\"Star\" size={\"24px\"} color=\"red\" />\r\n            </Box>\r\n\r\n            <Box m={3}>\r\n              <Icon name=\"Star\" size={\"24px\"} color=\"primary\" />\r\n            </Box>\r\n          </Flex>\r\n\r\n          <Text>Single icon, named imports that supports tree-shaking</Text>\r\n\r\n          <Text bg={\"light-gray\"} p={3}>\r\n            import {`{ Star }`} from \"@pipeline-ui/icons\";\r\n          </Text>\r\n\r\n          <Flex>\r\n            <Box m={3}>\r\n              <Star size={\"24px\"} />\r\n            </Box>\r\n            <Box m={3}>\r\n              <Star size={\"24px\"} color={\"red\"} />\r\n            </Box>\r\n            <Box m={3}>\r\n              <Battery20 size={\"24px\"} />\r\n            </Box>\r\n            <Box m={3}>\r\n              <Battery20 size={\"24px\"} color={\"red\"} />\r\n            </Box>\r\n          </Flex>\r\n\r\n          <Text bg={\"light-gray\"} p={3}>\r\n            import {`{ Btc, Algo }`} from \"@pipeline-ui/icons\";\r\n          </Text>\r\n\r\n          <Flex>\r\n            <Box m={3}>\r\n              <Algo size={\"24px\"} />\r\n            </Box>\r\n            <Box m={3}>\r\n              <Algo size={\"24px\"} color={\"red\"} />\r\n            </Box>\r\n            <Box m={3}>\r\n              <Btc size={\"24px\"} />\r\n            </Box>\r\n            <Box m={3}>\r\n              <Btc size={\"24px\"} color={\"red\"} />\r\n            </Box>\r\n            <Box m={3}>\r\n              <Xuc size={\"24px\"} />\r\n            </Box>\r\n            <Box m={3}>\r\n              <Xuc size={\"24px\"} color={\"red\"} />\r\n            </Box>\r\n          </Flex>\r\n\r\n          <Heading as=\"h2\">Tokens</Heading>\r\n          <FilteredIcons icons={tokenIcons} placeholder={\"Algo\"} />\r\n\r\n          <Heading as=\"h2\">Material</Heading>\r\n          <FilteredIcons icons={mdIcons} placeholder={\"Star\"} />\r\n        </Box>\r\n      </BaseStyles>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}